import pandas as pd
import numpy as np
from scipy.stats import binom
import argparse


def frameshift_test(fs, bases_at_risk, noncoding_bg):
    # initialize p-values
    p_values = pd.Series(np.zeros(len(fs)),
                         index=fs.index)

    # use specific background type
    if noncoding_bg:
        bg = noncoding_bg.ix['non-coding frameshift', :]
    else:
        coding_fs_cts = fs.sum()
        bg = coding_fs_cts.astype(float) / bases_at_risk.sum()

    # iterate through each gene to calculate p-value
    for k in range(len(fs)):
        g_obs = fs.iloc[k,:].sum()
        w = fs.iloc[k,:].astype(float) / g_obs

        # get weighting factor
        Pg = 0
        for i in range(len(fs.columns)):
            Pg += w[i] * bg[i]

        p_val = binomial_test(g_obs, bases_at_risk[k], Pg)
        p_values[k] = p_val

    return p_values


def binomial_test(n, N, P):
    if n <= 0:
        return 1.0
    pval = binom.sf(n, N, P)
    return pval


def read_noncoding_background_rate(path):
    background_df = pd.read_csv(path, sep='\t', index_col=0)
    drop_list = ['Genome Length', 'Black List Length',
                 'Non-coding Length', 'Number of Samples']
    background_df = background_df.drop(drop_list, axis=1)
    bases_at_risk = background_df.pop('Bases at Risk').iloc[0]
    f = background_df.astype(float) / bases_at_risk
    return f


def parse_arguments():
    info = ('Peform a Binomial test on the frequency of frameshift mutations '
            'compared to the background.')
    parser = argparse.ArgumentParser(description=info)
    help_str = 'Frameshift counts from count_frameshifts.py'
    parser.add_argument('-c', '--frameshift-counts',
                        type=str, required=True,
                        help=help_str)
    help_str = ('Background non-coding rate of INDELs with lengths matching '
                'frameshifts in --frameshift-counts option. Enter path to file '
                'generated by calc_non_coding_frameshift_rate.py.')
    parser.add_argument('-non-coding', '--non-coding-background',
                        type=str,
                        help=help_str)
    help_str = 'Output file'
    parser.add_argument('-o', '--output',
                        type=str, required=True,
                        help=help_str)
    args = parser.parse_args()
    return vars(args)


def main(opts):
    # read in gene frameshift counts
    fs_cts = pd.read_csv(opts['frameshift_counts'], sep='\t', index_col=0)
    fs_cts = fs_cts.drop(['total', 'unmapped', 'gene length'], axis=1)
    gene_bases_at_risk = fs_cts.pop('bases at risk')

    # read non-coding background rate file
    if opts['non_coding_background']:
        f = read_noncoding_background_rate(opts['non_coding_background'])
    else:
        f = None

    # perform binomial test
    result = frameshift_test(fs_cts, gene_bases_at_risk, f)
    result = pd.DataFrame({'p-value':result})
    result.sort(columns='p-value', ascending=True).to_csv(opts['output'], sep='\t')


if __name__ == "__main__":
    opts = parse_arguments()
    main(opts)
